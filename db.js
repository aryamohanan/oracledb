// db.js
const instana = require('@instana/collector');
const oracledb = require('oracledb');
require('dotenv').config();
async function setupDatabase() {
  let connection;

  try {
    connection = await oracledb.getConnection({
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      connectionString: process.env.DB_CONNECTION_STRING,
    });

    console.log('Successfully connected to the database');

    const createTableQuery = `
      DECLARE
        table_exists NUMBER := 0;
      BEGIN
        SELECT COUNT(*)
        INTO table_exists
        FROM user_tables
        WHERE table_name = 'EMPLOYEES';

        IF table_exists = 0 THEN
          EXECUTE IMMEDIATE '
            CREATE TABLE employees (
              employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              first_name VARCHAR2(50),
              last_name VARCHAR2(50),
              email VARCHAR2(100),
              hire_date DATE,
              job_title VARCHAR2(50)
            )';
        END IF;
      END;`;

    await connection.execute(createTableQuery);
    console.log('Table "employees" checked/created successfully');
    await connection.commit();
  } catch (err) {
    console.error('Error setting up the database:', err);
  } finally {
    if (connection) {
      try {
        await connection.close();
        console.log('Connection closed');
      } catch (err) {
        console.error('Error closing the connection:', err);
      }
    }
  }
}

async function insertEmployee(employeeData) {
  let connection;

  try {
    connection = await oracledb.getConnection({
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      connectionString: process.env.DB_CONNECTION_STRING,
    });

    const insertDataQuery = `
      INSERT INTO employees (first_name, last_name, email, hire_date, job_title)
      VALUES (:first_name, :last_name, :email, SYSDATE, :job_title)`;

    await connection.execute(insertDataQuery, employeeData);
    await connection.commit();

    return { message: 'Employee data inserted successfully' };
  } catch (err) {
    console.error('Error inserting data:', err);
    throw new Error('Error inserting data: ' + err.message);
  } finally {
    if (connection) {
      try {
        await connection.close();
        console.log('Connection closed');
      } catch (err) {
        console.error('Error closing the connection:', err);
      }
    }
  }
}

async function getEmployees() {
  let connection;

  try {
    connection = await oracledb.getConnection({
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      connectionString: process.env.DB_CONNECTION_STRING,
    });

    const query = 'SELECT * FROM employees';

    const tags = {
      db: {
        instance: 'employees',
        type: 'sql',
        statement: query,
        user: 'sa',
      },
    };

    // Start Instana exit span for outgoing call
    await instana.sdk.async.startExitSpan('oracledb calls', tags);
    const result = await connection.execute(query);
    // Complete Instana exit span for outgoing call
    instana.sdk.async.completeExitSpan();

    return result.rows;
  } catch (err) {
    console.error('Error fetching data:', err);
    throw new Error('Error fetching data: ' + err.message);
  } finally {
    if (connection) {
      try {
        await connection.close();
        console.log('Connection closed');
      } catch (err) {
        console.error('Error closing the connection:', err);
      }
    }
  }
}

module.exports = {
  setupDatabase,
  insertEmployee,
  getEmployees,
};
